// var timer = new DispatcherTimer();
// @class('TickHandler', null, [], [
// 	{
// 		name: 'Tick',
// 		forHandler: 'EventHandler',
// 		returnType: 'void',
// 		arguments: [
// 			{ name: 'sender', type: 'Object^' },
// 			{ name: 'e', type: 'Object^' }
// 		],
// 		action: function(params) {
// 			console.log('TIMER!!!');
// 		}
// 	}
// ]);

// var classHandler = new TickHandler();
//	handler = new EventHandler(classHandler, 'Tick');

var CELL_SIZE = 100,
	FPS_INTERVAL = 30;

var window = Window.Current,
universe = new Canvas();

// set up universe
universe.Height = window.Bounds.Height;
universe.Width = window.Bounds.Width;
universe.Background = new SolidColorBrush(Colors.Black);

// set up the rest of the variables
var xSize = (universe.Width / CELL_SIZE) | 0,
	ySize = (universe.Height / CELL_SIZE) | 0;

// populate cells
var cells = [];
for (var x = 0; x < xSize; x++) {
	cells[x] = [];
	for (var y = 0; y < ySize; y++) {
		// is this cell alive?
		var alive = Math.random() >= 0.5;

		// create native UI view
		var cellProxy = new Canvas();
		cellProxy.Height = CELL_SIZE;
		cellProxy.Width = CELL_SIZE;
		Canvas.SetLeft(cellProxy, x * CELL_SIZE);
		Canvas.SetTop(cellProxy, y * CELL_SIZE);
		cellProxy.Fill = new SolidColorBrush(Colors.White);
		cellProxy.Visibility = alive ? Visibility.Visible : Visibility.Collapsed;

		// save the cell
		cells[x][y] = {
			proxy: cellProxy,
			lastAlive: alive,
			alive: alive
		};

		// add cell to universe
		universe.Children.Append(cellProxy);
	}
}

// start app
window.Content = universe;
window.Activate();

// the render function
var ctr = 0;
function update(params) {
        var x, y, cell;

        // render current generation
        for (x = 0; x < xSize; x++) {
                for (y = 0; y < ySize; y++) {
                        cell = cells[x][y];

                        // minimze number of times we need to modify the proxy object
                        if (cell.alive !== cell.lastAlive) {
                        				cell.proxy.Visibility = cell.alive ? Visibility.Visible : Visibility.Collapsed;
                                //cell.proxy.setHidden(!cell.alive);
                        }

                        // save the state
                        cell.lastAlive = cell.alive;
                }
        }

        // build next generation
        for (x = 0; x < xSize; x++) {
                for (y = 0; y < ySize; y++) {
                        cell = cells[x][y];
                        cell.alive = getNextState(x, y, cell.lastAlive);
                }
        }

        // show the average FPS
        // if (!(++ctr % FPS_INTERVAL)) {
        //         ctr = 1;
        //         label.setText(__('FPS: ' + Math.round(FPS_INTERVAL*10*getFPS(params.sender))/10));
        // }

}

// calculate the next state of each cell
function getNextState(x, y, alive) {
	var count = 0,
		xm1 = x > 0,
		xp1 = x+1 < xSize,
		ym1 = y > 0,
		yp1 = y+1 < ySize;

	if (xm1) {
		if (ym1 && cells[x-1][y-1].lastAlive) { count++; }
		if (cells[x-1][y].lastAlive) { count++; }
		if (yp1 && cells[x-1][y+1].lastAlive) { count++; }
	}
	if (xp1) {
		if (ym1 && cells[x+1][y-1].lastAlive) { count++; }
		if (cells[x+1][y].lastAlive) { count++; }
		if (yp1 && cells[x+1][y+1].lastAlive) { count++; }
	}
	if (ym1 && cells[x][y-1].lastAlive) { count++; }
	if (yp1 && cells[x][y+1].lastAlive) { count++; }

	return (alive && (count === 2 || count === 3)) || (!alive && count === 3);
}

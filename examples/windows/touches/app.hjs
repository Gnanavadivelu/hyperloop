var transformOrigin = Point(.5, .5),
	deltas = [],
	window = Window.Current,
	canvas = new Canvas(),
	brush = new SolidColorBrush();

@class('ManipulationHandler', null, [], [
	{
		name: 'ManipulationDelta',
		forHandler: 'ManipulationDeltaEventHandler',
		returnType: 'void',
		arguments: [
			{ name: 'sender', type: 'Object^' },
			{ name: 'e', type: 'ManipulationDeltaRoutedEventArgs^' }
		],
		action: function (params) {
			var e = params.e,
				view = @cast('Canvas^', e.OriginalSource),
				transformGroup = new TransformGroup();

			!this.angle && (this.angle = { R: 0 });
			!this.translation && (this.translation = { X: 0, Y: 0 });

			// Rotate.
			view.RenderTransformOrigin = transformOrigin;
			var rotateTransform = new RotateTransform();
			rotateTransform.Angle = (this.angle.R += e.Delta.Rotation);
			transformGroup.Children.Append(rotateTransform);

			// Translate.
			var translateTransform = new TranslateTransform();
			translateTransform.X = (this.translation.X += e.Delta.Translation.X);
			translateTransform.Y = (this.translation.Y += e.Delta.Translation.Y);
			transformGroup.Children.Append(translateTransform);

			// Scale.
			view.Width += e.Delta.Expansion;
			view.Height += e.Delta.Expansion;

			// Apply.
			view.RenderTransform = transformGroup;
		}
	}
]);

brush.Color = Colors.Blue;
canvas.Background = brush;
canvas.Width = window.Bounds.Width;
canvas.Height = window.Bounds.Height;

for (var i = 0; i < 3; i++) {
	var handler = new ManipulationHandler(),
	// TODO: We need to figure out how to protect handlers in memory, if necessary.
		delta = deltas[i] = new ManipulationDeltaEventHandler(handler, 'ManipulationDelta'),
		view = new Canvas();

	view.Width = view.Height = (Math.random() * 200 + 100) | 0;
	Canvas.SetTop(view, (Math.random() * (canvas.Height - view.Height)) | 0);
	Canvas.SetLeft(view, (Math.random() * (canvas.Width - view.Width)) | 0);
	view.ManipulationMode = ManipulationModes.All;
	view.add_ManipulationDelta(delta);
	brush = new SolidColorBrush();
	brush.Color = [ Colors.Red, Colors.Yellow, Colors.Green ][i % 3];
	view.Background = brush;
	canvas.Children.Append(view);
}

window.Content = canvas;
window.Activate();
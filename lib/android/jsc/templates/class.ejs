<%- renderTemplate('templates/doc.ejs') %>
package <%- object.generatedPackage %>;

import java.io.StringWriter;
import java.io.PrintWriter;

import com.appcelerator.javascriptcore.JavaScriptCoreLibrary;
import com.appcelerator.javascriptcore.callbacks.JSObjectCallAsConstructorCallback;
import com.appcelerator.javascriptcore.callbacks.JSObjectCallAsFunctionCallback;
import com.appcelerator.javascriptcore.callbacks.JSObjectHasInstanceCallback;
import com.appcelerator.javascriptcore.callbacks.JSObjectConvertToTypeCallback;
import com.appcelerator.javascriptcore.opaquetypes.JSClassDefinition;
import com.appcelerator.javascriptcore.opaquetypes.JSClassRef;
import com.appcelerator.javascriptcore.opaquetypes.JSContextRef;
import com.appcelerator.javascriptcore.opaquetypes.JSObjectRef;
import com.appcelerator.javascriptcore.opaquetypes.JSStaticValues;
import com.appcelerator.javascriptcore.opaquetypes.JSStaticFunctions;
import com.appcelerator.javascriptcore.opaquetypes.JSValueArrayRef;
import com.appcelerator.javascriptcore.opaquetypes.JSValueRef;
import com.appcelerator.javascriptcore.opaquetypes.Pointer;

import com.appcelerator.javascriptcore.enums.JSType;
import com.appcelerator.javascriptcore.enums.JSPropertyAttribute;

import com.appcelerator.hyperloop.Hyperloop;

public class <%- object.instanceName %> extends JSClassDefinition implements JSObjectHasInstanceCallback, JSObjectConvertToTypeCallback {

	private static final java.lang.String[] NAMESPACE = { <%- JSON.stringify(object.javaPackage.split('.')).replace('[', '').replace(']', '') %> };
	private static final JavaScriptCoreLibrary jsc = JavaScriptCoreLibrary.getInstance();
	private static JSClassRef jsClassRef = null;
	private static JSClassRef jsClassRefForConstructor = null;

	public static boolean registerClass(JSContextRef context, JSObjectRef parentObject) {
		JSValueRef exception = JSValueRef.Null();
		JSObjectRef object = jsc.JSObjectMake(context, getJSClass());
		jsc.JSObjectSetProperty(context, parentObject, getJSClassName(), object, JSPropertyAttribute.DontDelete, exception);

		return jsc.JSValueIsNull(context, exception);
	}

	public static JSClassRef getJSClass() {
		if (jsClassRef == null) {
			<%- object.instanceName %> definition = new <%- object.instanceName %>();
			definition.staticValues    = definition.createStaticValues();
			definition.staticFunctions = definition.createStaticFunctions();
			definition.className   = "<%- object.instanceName %>";
			<% if (object.fullInstanceName == 'java.lang.Object') { %>
			definition.parentClass = null;
			<% } else { %>
			definition.parentClass = <%- object.superClass.generatedPackage %>.<%- object.superClass.instanceName %>.getJSClass();
			<% } %>
			jsClassRef = jsc.JSClassCreate(definition);
			jsc.JSClassRetain(jsClassRef);
		}
		return jsClassRef;
	}

	public static JSClassRef getJSClassForConstructor() {
		if (jsClassRefForConstructor == null) {
			<%- object.instanceName %> definition = new <%- object.instanceName %>();
			definition.staticValues    = definition.createInstanceValues();
			definition.staticFunctions = definition.createInstanceFunctions();
			definition.hasInstance     = definition;
			definition.convertToType   = definition;
			definition.className   = "<%- object.instanceName %>Constructor";
			definition.parentClass = <%- object.superClass.generatedPackage %>.<%- object.superClass.instanceName %>.getJSClassForConstructor();
			jsClassRef = jsc.JSClassCreate(definition);
			jsc.JSClassRetain(jsClassRef);
		}
		return jsClassRefForConstructor;
	}
	
	@Override
	public void dispose() {
		super.dispose();

		jsClassRef = null;
		jsClassRefForConstructor = null;
	}

	public static java.lang.String getJSClassName() {
		return "<%- object.instanceName %>";
	}

	@Override
	public boolean hasInstance(JSContextRef context, JSObjectRef constructor,
			JSValueRef possibleValue, Pointer exception) {
		try {
			java.lang.Object objectA = constructor.getPrivateObject();
			java.lang.Object objectB = possibleValue.castToObject().getPrivateObject();
			if (objectA != null && objectB != null) {
				return objectA.getClass().isInstance(objectB);
			} else {
				return false;
			}
		} catch (Exception e) {
			Hyperloop.RaiseNativeToJSException(context, e, exception);
		}
		return false;
	}

	@Override
	public JSValueRef convertToType(JSContextRef context,
					JSObjectRef object, JSType type, Pointer exception) {
		java.lang.Object jobject = object.getPrivateObject(); 
		try {
			switch (type) {
			case Number:
				return jsc.JSValueMakeNumber(context, Double.parseDouble(jobject.toString()));
			case String:
				return jsc.JSValueMakeString(context, jobject.toString());
			default:
				return jsc.JSValueMakeString(context, jobject.toString());
			}
		} catch (Exception e) {
			Hyperloop.RaiseNativeToJSException(context, e, exception);
		}
		return null;
	}

	/*
	 * Convert JSValueRef to Java Object
	 */
	public static <%- object.fullInstanceName %> valueOf(JSContextRef ctx, JSValueRef value, Pointer exception) {
		JSValueRef checker = JSValueRef.Null();
		<% if (object.fullInstanceName == 'java.lang.String') { %>
		<%- object.fullInstanceName %> stringCopy = jsc.JSValueToStringCopy(ctx, value, checker);
		Hyperloop.checkJSException(ctx, checker, exception);
		return stringCopy;
		<% } else { %>
		JSObjectRef jsObj = jsc.JSValueToObject(ctx, value, checker);
		Hyperloop.checkJSException(ctx, checker, exception);
		return (<%-object.fullInstanceName %>)jsc.JSObjectGetPrivate(jsObj);
		<% } %>
	}

	/*
	 * Create JS object from Java instance
	 */
	public static JSValueRef toJSValueRef(JSContextRef ctx, <%- object.fullInstanceName %> value) {
		<% if (object.fullInstanceName == 'java.lang.String') { %>
		return jsc.JSValueMakeString(ctx, value);            
		<% } else { %>
		return jsc.JSObjectMake(ctx, getJSClassForConstructor(), value);
		<% } %>
	}


	private JSStaticFunctions createStaticFunctions() {
		JSStaticFunctions functions = new JSStaticFunctions();
<% Object.keys(class_methods).sort().forEach(function(m) {
			var methods = class_methods[m],
			code = makeMethod(state, object, methods, 'result', name, 'arguments', 'argumentCount');
-%>
		/**
		 * <%-name%>.<%=m%>();
		 */
		functions.add("<%- m %>", new JSObjectCallAsFunctionCallback() {
			public JSValueRef callAsFunction(JSContextRef ctx, JSObjectRef function,
											 JSObjectRef thisObject, int argumentCount,
											 JSValueArrayRef arguments, Pointer exception) {
<%- code %>
			}
		}, JSPropertyAttribute.DontDelete);
<% });-%>
		return functions;
	}

	private JSStaticValues createStaticValues() {
		return null;
	}

	private JSStaticFunctions createInstanceFunctions() {
		JSStaticFunctions functions = new JSStaticFunctions();
<% Object.keys(instance_methods).sort().forEach(function(m) {
			var methods = instance_methods[m],
			code = makeMethod(state, object, methods, 'result', name, 'arguments', 'argumentCount');
-%>
		/**
		 * <%-name%>.<%=m%>();
		 */
		functions.add("<%- m %>", new JSObjectCallAsFunctionCallback() {
			public JSValueRef callAsFunction(JSContextRef ctx, JSObjectRef function,
											 JSObjectRef thisObject, int argumentCount,
											 JSValueArrayRef arguments, Pointer exception) {
<%- code %>
			}
		}, JSPropertyAttribute.DontDelete);
<% });-%>
		/*
		 * <%-name%>.toString()
		 * Unlike Java API, toString() returns JavaScript String instead of Java String.
		 */
		functions.add("toString", new JSObjectCallAsFunctionCallback() {
			public JSValueRef callAsFunction(JSContextRef context, JSObjectRef function,
											 JSObjectRef thisObject, int argumentCount,
											 JSValueArrayRef arguments, Pointer exception) {
				java.lang.Object jobject = thisObject.getPrivateObject(); 
				if (jobject != null) {
					return jsc.JSValueMakeString(context, jobject.toString());
				} else {
					return jsc.JSValueMakeString(context, thisObject.toString());
				}
			}
		}, JSPropertyAttribute.DontDelete) ;

		/*
		 * <%-name%>.equals()
		 * This method compares Java objects which does not use JavaScriptCore's JSValueIsEqual.
		 */
		functions.add("equals", new JSObjectCallAsFunctionCallback() {
			public JSValueRef callAsFunction(JSContextRef context, JSObjectRef function,
											 JSObjectRef thisObject, int argumentCount,
											 JSValueArrayRef arguments, Pointer exception) {
				java.lang.Object jobjectA = thisObject.getPrivateObject();
				if (jobjectA != null && argumentCount > 0) {
					java.lang.Object jobjectB = arguments.get(context, 0).castToObject().getPrivateObject();
					return jsc.JSValueMakeBoolean(context, jobjectA.equals(jobjectB));
				}
				return jsc.JSValueMakeBoolean(context, false);
			}
		}, JSPropertyAttribute.DontDelete);
		return functions;
	}

	private JSStaticValues createInstanceValues() {
		return null;
	}

	public static java.lang.String[] getNamespace() {
		return NAMESPACE;
	}
}
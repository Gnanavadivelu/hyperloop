/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
@import JavaScriptCore;
#import <<%=classprefix%>converters.h>
#import <hyperloop.h>
#import "NSException+NSExceptionHyperloopAdditions.h"
#import "Blocks.h"

@import JavaScriptCore;
<% imports.forEach(function(i) { -%>
@import <%=i%>;
<% }) -%>
<% _includes.forEach(function(i) { -%>
#import <%-i%>
<% }) -%>

// export methods we use
<% externs.forEach(function(e){ -%>
<%- e %>
<% }) -%>

<%- object.externTypedef && object.externTypedef.join('\n') %>

/**
 * this is a block dispose shim that will unprotect our JS unprotect our
 * function and thisObject and then call the original cleanup handler
 */
static void HyperloopDisposeHelperFor<%=object.mangledName%>(void *src) 
{
	struct HLBlockLiteral *block = (struct HLBlockLiteral*)src;
	struct hyperloop_block_descriptor *descriptor = (struct hyperloop_block_descriptor*)block->descriptor;
	JSValueUnprotect(descriptor->context,descriptor->thisObject);
	JSValueUnprotect(descriptor->context,descriptor->function);
	descriptor->context = NULL;
	descriptor->thisObject = NULL;
	descriptor->function = NULL;
	descriptor->orig_dispose_helper(src);
}

JSValueRef Hyperloop<%=object.mangledName%>FunctionCallback (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef *exception)
{
    <%=object.simpleType%> block$ = (<%=object.simpleType%>)HyperloopGetPrivateObjectAsID(function);
    return JSValueMakeUndefined(ctx);
}

JSValueRef Hyperloop<%=object.mangledName%>ToJSValueRef(JSContextRef ctx, <%=object.simpleType%> block)
{
	JSStringRef name = JSStringCreateWithUTF8CString("<%=object.mangledName%>");
	JSObjectRef function = JSObjectMakeFunctionWithCallback(ctx,name,Hyperloop<%=object.mangledName%>FunctionCallback);
	JSObjectSetPrivate(function,(void*)block);
	JSStringRelease(name);
	return function;
}

<%=object.simpleType%> HyperloopJSValueRefTo<%=object.mangledName%>(JSContextRef context, JSObjectRef thisObject, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
	__block JSObjectRef function = JSValueToObject(context,value,exception);
	__block JSContextRef ctx = HyperloopGetGlobalContext(context);
	// NOTE: cleanup happens in HyperloopDisposeHelperFor<%=object.mangledName%> above
	JSValueProtect(ctx,function); 
	JSValueProtect(ctx,thisObject); 
	<%- indentify(code,'	') %>
	return [Block_copy(block$) autorelease];
}


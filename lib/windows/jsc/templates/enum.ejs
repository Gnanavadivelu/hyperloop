<%- renderTemplate('templates/doc.ejs') %>
#include "<%- object.simpleType %>.h"

JSValueRef Hyperloop<%=object.mangledName%>ToJSValueRef(JSContextRef ctx, <%=object.simpleType%> type)
{
	return JSValueMakeNumber(ctx, (double)type);
}
<%=object.simpleType%> HyperloopJSValueRefTo<%=object.mangledName%>(JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
	return (<%=object.simpleType%>)(int)JSValueToNumber(ctx, value, exception);
}

JSClassDefinition ClassDefinitionFor<%-name%>;
JSClassRef <%-name%>ClassDef;

<% entry.fields && entry.fields.forEach(function(property) {
    var get_code = makeGetProperty(state, object, property, property.name, 'result', varname);
-%>
/**
 * <%-varname%>-><%=property.name%>
 */
JSValueRef Get<%=: property.name | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
{
    <%-indentify(get_code,'    ')%>
}

<% }) -%>

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-name%>(JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    return HyperloopToString(ctx, "<%-simpleType%>");
}

static JSStaticValue StaticValueArrayFor<%-name%> [] = {
<% entry.fields && entry.fields.forEach(function(property) { -%>
    { "<%=property.name%>", Get<%=: property.name | capitalize %>For<%-name%>, 0, kJSPropertyAttributeNone },
<% }) -%>
    { 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%-name%> [] = {
    { "toString", toStringFor<%-name%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
    { 0, 0, 0 }
};

/**
 * called when a new JS object is created for this class
 */
void InitializerFor<%-name%>(JSContextRef ctx, JSObjectRef object)
{
    JSPrivateObject *po = (JSPrivateObject *)JSObjectGetPrivate(object);
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-name%>(JSObjectRef object)
{
<%  if (!assign) { -%>
    void *p = HyperloopGetPrivateObjectAsPointer(object);
    if (p!=NULL)
    {
        free(p);
        p = NULL;
    }
<% } -%>
    HyperloopDestroyPrivateObject(object);
}

/**
 * called to get the JSClassRef for <%-name%> class
 */
JSClassRef CreateClassFor<%-name%> ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%> = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-name%>.staticValues = StaticValueArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.staticFunctions = StaticFunctionArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.initialize = InitializerFor<%-name%>;
        ClassDefinitionFor<%-name%>.finalize = FinalizerFor<%-name%>;
        ClassDefinitionFor<%-name%>.className = "<%-name%>";

        <%-name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-name%>);

        JSClassRetain(<%-name%>ClassDef);
    }
    return <%-name%>ClassDef;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%>(JSContextRef ctx)
{
    JSClassRef classRef = CreateClassFor<%-name%>();
    JSObjectRef object = JSObjectMake(ctx, classRef, 0);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-simpleType%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    JSObjectRef plainObject = JSObjectMake(ctx,0,0);
    JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
    JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(prototypeProperty);

    return object;
}

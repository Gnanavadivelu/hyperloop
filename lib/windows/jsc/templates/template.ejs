<%- renderTemplate('templates/doc.ejs') %>
#include "<%=gen.prefix%><%=gen.name%>.h"
#include "nan.h"

map<string, string> <%=gen.prefix%><%=gen.name%>::sources;

void <%=gen.prefix%><%=gen.name%>::loadSources() {
<% Object.keys(gen.sourceResults).forEach(function(file) {
	if (file === '/_source_map.js') {
		return;
	}
	var source = gen.sourceResults[file],
			key = file.replace(/\\/g, '/')
					.replace(/\/\//g, '/')
					.replace(/\.(js|hjs|json)$/, ''); %>
	<%=gen.prefix%><%=gen.name%>::sources["<%- key %>"] = "<%- source %>";
<% }); %>
}

<%-body%>

void <%=gen.prefix%><%=gen.name%>::loadWithObject(JSContextRef ctx, JSObjectRef object) {

<% Object.keys(memory).forEach(function(key) {
	var mem = memory[key]; -%>
	//
	// @memory -> <%- mem.node.start.file %>:<%- mem.node.start.line %>:<%- mem.node.start.col%>
	//
	// don't free, memory ownership is passed to JSObjectRef (<%=key%>$Object)
	//
	<%- indentify(mem.code,'		') %>

	JSBuffer *<%=key%>$Buffer = (JSBuffer *)malloc(sizeof(JSBuffer));
	<%=key%>$Buffer->type = JSBufferTypePointer;
	<%=key%>$Buffer->buffer = (void*) <%-mem.assign%>;
	<%=key%>$Buffer->length = <%-mem.length%>;

	JSObjectRef <%=key%>$Object = MakeObjectForJSBuffer (ctx, <%=key%>$Buffer);
	JSStringRef <%=key%>$Name = JSStringCreateWithUTF8CString("<%=key%>");
	JSObjectSetProperty(ctx, object, <%=key%>$Name, <%=key%>$Object, kJSPropertyAttributeReadOnly|kJSPropertyAttributeDontEnum|kJSPropertyAttributeDontDelete, 0);
	JSStringRelease(<%=key%>$Name);

<% }) -%>

	<%-indentify(code,'	') %>
}